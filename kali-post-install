#!/bin/bash
clear
#                       _____               _  
#                      |  _  |             | | 
#   __ _ _ __ _ __ ___ | |/' | _ __ ___  __| | 
#  / _` | '__| '_ ` _ \|  /| || '__/ _ \/ _` | 
# | (_| | |  | | | | | \ |_/ /| | |  __/ (_| | 
#  \__,_|_|  |_| |_| |_|\___(_)_|  \___|\__,_| 

cat /usr/local/bin/arm0red
echo -e "\e[31;1m ***** \e[34;1m arm0.red Security \e[31;1m *****\e[0m"
echo -e "\e[31;1m ***** \e[34;1m Kali Post Install v1.7 \e[31;1m *****\e[0m"

echo -e "\e[31;1m ***** \e[34;1m ADDING APT HTTPS SUPPORT \e[31;1m *****\e[0m"
sudo apt install apt-transport-https
sudo sed -i 's/http\:\/\//https\:\/\//g' /etc/apt/sources.list
echo ""

echo  -e "\e[31;1m ***** \e[34;1m UPDATING APT PACKAGES \e[31;1m *****\e[0m"
sudo apt update && sudo apt full-upgrade -y
echo ""

echo -e "\e[31;1m ***** INSTALLING \e[34;1m Speedtest-cli \e[31;1m *****\e[0m"
sudo apt install speedtest-cli -y
echo ""

echo -e "\e[31;1m ***** INSTALLING \e[34;1m TOR \e[31;1m packages*****\e[0m"
sudo apt install tor torbrowser-launcher tor-geoipdb onionbalance onioncircuits onionshare vanguards -y
echo ""

echo -e "\e[31;1m ***** INSTALLING \e[34;1m Kali-AnonSurf \e[31;1m forked by \e[34;1m trackmastersteve \e[31;1m *****\e[0m"
sudo apt install git -y
mkdir ~/Code/
cd ~/Code/
git clone https://github.com/trackmastersteve/kali-anonsurf.git
cd kali-anonsurf
sudo ./installer.sh
echo ""

echo -e "\e[31;1m ***** CHANGING DEFAULT \e[34;1m SSH SERVER KEYS \e[31;1m *****\e[0m"
sudo mkdir /etc/ssh/default_kali_keys
sudo mv /etc/ssh/ssh_host_* /etc/ssh/default_kali_keys/
sudo dpkg-reconfigure openssh-server
echo "Old Keys:"
sudo md5sum /etc/ssh/default_kali_keys/*
echo "New Keys:"
sudo md5sum /etc/ssh/*
echo ""

echo -e "\e[31;1m ***** Generating new \e[34;1m SSH client keys \e[31;1m *****\e[0m"
ssh-keygen -t rsa
echo ""

echo -e "\e[31;1m ***** Generating new \e[34;1m PGP keys \e[31;1m *****\e[0m"
gpg --gen-key

echo -e "\e[31;1m ***** SETTING UP \e[34;1m METASPLOIT DATABASE \e[31;1m *****\e[0m"
sudo systemctl start postgresql
sudo msfdb init
echo ""

echo -e "\e[31;1m ***** INSTALLING \e[34;1m Microsoft Visual Studio Code \e[31;1m *****\e[0m"
# Download the Microsoft GPG key, and convert it from OpenPGP ASCII armor format to GnuPG format
curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
# Move the file into your apt trusted keys directory (requires root)
sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
# Add the VS Code Repository
sudo sh -c 'echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'
# Update and install Visual Studio Code 
sudo apt update && sudo apt install code -y

# 64-Bit Keybase
read -r -p "Do you want to install '64'-Bit or '32'-Bit Keybase? [64/32/Skip] (WARNING: Having this on your computer will make it less 'quiet' on the network!" response
if [[ $response =~ ^([64])+$ ]]
then
	echo -e "\e[31;1m ***** INSTALLING \e[34;1m KEYBASE \e[31;1m *****\e[0m"
	curl --remote-name https://prerelease.keybase.io/keybase_amd64.deb
	sudo apt install ./keybase_amd64.deb
	run_keybase
	echo ""

# 32-Bit Keybase
elif [[ $response =~ ^([32])+$ ]]
then
	echo -e "\e[31;1m ***** INSTALLING \e[34;1m KEYBASE \e[31;1m *****\e[0m"
	curl --remote-name https://prerelease.keybase.io/keybase_i386.deb
	sudo apt install ./keybase_i386.deb
	run_keybase -g # run without GUI; it is not supported on 32-bit Linux
	echo ""
else
	echo "\e[31;1m Skipping \e[34;1m Keybase \e[31;1m installation...\e[0m"
fi
echo -e "\e[31;1m ***** Converting \e[34;1m Keybase repo \e[31;1m to https. *****\e[0m"
sudo sh -c 'echo "deb https://prerelease.keybase.io/deb stable main" > /etc/apt/sources.list.d/keybase.list'

echo -e "\e[31;1m ***** \e[34;1m Private Internet Access VPN is recommended \e[31;1m *****\e[0m"
echo -e "\e[31;1m ***** You can Download it at \e[34;1m https://www.privateinternetaccess.com/pages/pia-2yr-deal/arm0red \e[31;1m *****\e[0m"
read -r -p "Do you want to install it now? (Click 'y' after you have downloaded the installer.) [y/N] " response
if [[ $response =~ ^([Yy][eE][sS]|[yY])+$ ]]
then
	echo -e "\e[31;1m ***** \e[34;1m INSTALLING PRIVATE INTERNET ACCESS \e[31;1m *****\e[0m"
	~/Downloads/pia-linux*.run
else
	echo -e "\e[1;32mSkipping PIA Installation.\e[0m"
fi

echo -e "\e[31;1m A REBOOT IS REQUIRED. \e[0m"

read -r -p "Do you want to reboot now? [y/N] " response
if [[ $response =~ ^([Yy][eE][sS]|[yY])+$ ]]
then
	sudo systemctl reboot
else
	echo -e "\e[1;32mSome changes won't take effect until you reboot!\e[0m"
fi

